import aiosqlite
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
import datetime

logging.basicConfig(level=logging.INFO)

API_TOKEN = '7508335252:AAHGr1iW3pZSUwzs3KcUA-SDAFx6v71_3UU'

# Объект бота
bot = Bot(token=API_TOKEN)
# Диспетчер
dp = Dispatcher()

# Задаем имя базы данных
DB_NAME = 'quiz_bot.db'
DB_RESULTS_NAME = 'quiz_results.db'

# Структура квиза
quiz_data = [
    {
        'question': 'Что такое Python?',
        'options': ['Язык программирования', 'Тип данных', 'Музыкальный инструмент', 'Змея на английском'],
        'correct_option': 0
    },
    {
        'question': 'Какой тип данных используется для хранения целых чисел?',
        'options': ['int', 'float', 'str', 'object'],
        'correct_option': 0
    },
    {
        'question': 'Какое название носит цикл, вызывающий сам себя, в Python?',
        'options': ['Инфинит', 'Закольцованный', 'Рекурсивный', 'Абстрактный'],
        'correct_option': 2
    },
    {
        'question': 'Какое название носят значения true и false?',
        'options': ['Трикстерные', 'Булевы', 'Бабулевы', 'Объектные'],
        'correct_option': 1
    },
    {
        'question': 'Какой тип данных используется для хранения чисел с плавающей точкой?',
        'options': ['int', 'float', 'str', 'object'],
        'correct_option': 1
    },
    {
        'question': 'С помощью какой команды задаются функции в Python?',
        'options': ['fid', 'if', 'while', 'def'],
        'correct_option': 3
    },
    {
        'question': 'Какая команда используется для запроса данных от пользователя?',
        'options': ['print', 'while', 'qst', 'input'],
        'correct_option': 3
    },
    {
        'question': 'Что означает аббревиатура ML?',
        'options': ['Machine learning', 'Mythic laugh', 'Mamin Largus', 'Martin Lawrence'],
        'correct_option': 0
    },
    {
        'question': 'Какая команда используется для вывода данных?',
        'options': ['stay', 'print', 'paint', 'draw'],
        'correct_option': 1
    },
    {
        'question': 'Мальчика как звали, выжил который?',
        'options': ['Гарри Поттер', 'Северус Снег', 'Бред Питт', 'Йода, ты спалился'],
        'correct_option': 3
    },
]

def generate_options_keyboard(answer_option, right_answer):
    # Создаем собрщика клавиатур типа Inline
    builder = InlineKeyboardBuilder()

    # В цикле создаем 4 Inline кнопки, а точнее Callback-кнопки
    for option in answer_option:
        builder.add(types.InlineKeyboardButton(
            # Текст на кнопках соответствует вариантам ответов
            text = option,
            # Присваиваем данные для колбэк запроса.
            # Если ответ верный сформируется колбэк-запрос с данными "right_answer"
            # Если ответ неверный сформируется колбэк-запрос с данными "wrong_answer"
            callback_data="right_answer" if option == right_answer else "wrong_answer")
            )
    # Выводим по одной кнопке в столбик
    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(F.data == 'right_answer')
async def right_answer(callback: types.CallbackQuery):
    # Редактируем сообщение с целью убрать кнопки (reply_markup=None)
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    # Отправляем сообщение в чат, что ответ верный
    await callback.message.answer('Верно!')
     # Получение текущего вопроса для данного пользователя
    current_question_index = await get_quiz_index(callback.from_user.id)

    # Обновление номера текущего вопроса в базе данных
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    # Проверяем, достигнут ли конец квиза
    if current_question_index < len(quiz_data):
        # Следующий вопрос
        await get_question(callback.message, callback.from_user.id)
    else:
        # Уведомление об окончании квиза
        await callback.message.answer('Это был последний вопрос. Квиз завершен!')


@dp.callback_query(F.data == 'wrong_answer')
async def wrong_answer(callback: types.CallbackQuery):
    # Редактируем сообщение с целью убрать кнопки (reply_markup=None)
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # Получение текущего вопроса для данного пользователя
    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']

    # Отправляем сообщение в чат сообщение об ошибке с указанием верного ответа
    await callback.message.answer(f"Неверно! Правильный ответ: {quiz_data[current_question_index]['options'][correct_option]}")

    # Обновление номера текущего вопроса в базе данных
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    # Проверяем, достигнут ли конец квиза
    if current_question_index < len(quiz_data):
        # Следующий вопрос
        await get_question(callback.message, callback.from_user.id)
    else:
        # Уведомление об окончании квиза
        await callback.message.answer('Это был последний вопрос. Квиз завершен!')

# Хэндлер на команду /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="Начать игру"))
    await message.answer("Добро пожаловать в квиз!", reply_markup=builder.as_markup(resize_keyboard=True))

async def get_question(message, user_id: int):

    # Запрашиваем из базы текущий индекс для вопроса
    current_question_index = await get_quiz_index(user_id)
    # Получаем индекс правильного ответа для текущего вопроса
    correct_index = quiz_data[current_question_index]['correct_option']
    # Получаем список вариантов ответа для текущего вопроса
    opts = quiz_data[current_question_index]['options']

    # Функция генерации кнопок для текущего вопроса квиза
    # В качестве аргументов передаем варианты ответов и значение правильного ответа (не индекс!)
    kb = generate_options_keyboard(opts, opts[correct_index])
    # Отправляем в чат сообщение с вопросом, прикрепляем сгенерированные кнопки
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)

@dp.message(F.text=="Начать игру")
async def new_quiz(message: types.Message):
    # Получаем id пользователя, отправившего сообщение
    user_id = message.from_user.id
    # Регистрируем игрока
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    await save_player(user_id, username, first_name, last_name)
    # Сбрасываем значение текущего индекса вопроса квиза в 0
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    # Запрашиваем новый вопрос для квиза
    await get_question(message, user_id)

async def get_quiz_index(user_id):
    # Подключаемся к базе данных
    async with aiosqlite.connect(DB_NAME) as db:
        # Получаем запись для заданного пользователя
        async with db.execute('SELECT question_index FROM quiz_state WHERE user_id = (?)', (user_id, )) as cursor:
            # Возвращаем результат
            results = await cursor.fetchone()
            if results is not None:
                return results[0]
            else:
                return 0

async def update_quiz_index(user_id, index):
    # Создаем соединение с базой данных (если она не существует, она будет создана)
    async with aiosqlite.connect(DB_NAME) as db:
        # Вставляем новую запись или заменяем её, если с данными user_id уже существует
        await db.execute('INSERT OR REPLACE INTO quiz_state (user_id, question_index) VALUES (?, ?)', (user_id, index))
        # Сохраняем изменения
        await db.commit()

async def save_player(player_id, username, first_name, last_name):
    async with aiosqlite.connect(DB_RESULTS_NAME) as db:
        async with db.cursor() as cursor:
            await cursor.execute('''
            INSERT OR IGNORE INTO players (player_id, username, first_name, last_name) VALUES (?, ?, ?, ?)
            ''', (player_id, username, first_name, last_name))
            await db.commit()

async def save_result(player_id, quiz_name, score):
    async with aiosqlite.connect(DB_RESULTS_NAME) as db:
        async with db.cursor() as cursor:
            await cursor.execute('''
                SELECT quiz_name, score, timestamp
                FROM quiz_results
                WHERE player_id = ?
                ORDER BY timestamp DESC
                LIMIT 1
            ''', (player_id,))
            result = await cursor.fetchone()
            return result 

async def get_player_stats(player_id):
    async with aiosqlite.connect(DB_RESULTS_NAME) as db:
        async with db.cursor() as cursor:
            await cursor.execute('''
                SELECT
                    AVG(score),
                    COUNT(*),
                    MAX(score)
                FROM quiz_results
                WHERE player_id = ?
            ''', (player_id,))
            result = await cursor.fetchone()
            return result 


# Хендлер на команду /quiz
@dp.message(Command('quiz'))
async def cmd_quiz(message: types.Message):
    # Логика начала квиза
    await message.answer('Давайте начнём квиз! Первый вопрос: ...')
    await new_quiz(message)

async def create_table():
    # Создаем соединение с базой данных (если она не существует, то она будет создана)
    async with aiosqlite.connect(DB_NAME) as db:
        # Выполняем SQL-запрос к базе данных
        await db.execute('''CREATE TABLE IF NOT EXISTS quiz_state (user_id INTEGER PRIMARY KEY, question_index INTEGER)''')
        # Сохраняем изменения
        await db.commit()

async def create_tables():
    async with aiosqlite.connect(DB_RESULTS_NAME) as db:
        async with db.cursor() as cursor:
            await cursor.execute('''CREATE TABLE IF NOT EXISTS players(
            player_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT
            )
            ''')
            await cursor.execute('''CREATE TABLE IF NOT EXISTS players(
            result_id INTEGER PRIMARY KEY AUTOINCREMENT, player_id INTEGER, quiz_name TEXT, score INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (player_id) REFERENCES players(player_id)
            )
            ''')
        await db.commit()


# Запуск процесса поллинга нвоых апдейтов
async def main():
    # Запускаем создание таблицы базы данных
    await create_table()
    await create_tables()
    await dp.start_polling(bot)


asyncio.run(main())